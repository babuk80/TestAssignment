@page "/"
@using Insurance.Model;
@inject HttpClient Http

<h3>Insurance Information</h3>

<input type="number" @bind="customerId" placeholder="Enter Customer ID" />
<button @onclick="FetchInsuranceInfo">Fetch Info</button>

@if (customer != null && policy != null)
{
	<div>
		<h4>Customer Information</h4>
		<p>Name: @customer.Name</p>
		<p>Address: @customer.Address</p>

		<h4>Policy Information</h4>
		<p>Policy Type: @policy.PolicyType</p>
		<p>Premium: @policy.Premium</p>
	</div>
}
@if (apiResponse != null)
{
	<h4>API Response:</h4>
	<p>@apiResponse</p>
}

@code {
	private int customerId;
	private Customer customer;
	private Policy policy;
	private string token;
	private string apiResponse;

	private async Task GenerateToken()
	{
		// Call the token generation endpoint
		var response = await Http.PostAsync("https://localhost:7154/api/Authentication/token", null);

		if (response.IsSuccessStatusCode)
		{
			var result = await response.Content.ReadAsStringAsync();
			token = result;  
		}
	}

	private async Task FetchInsuranceInfo()
	{
		try
		{
			await GenerateToken();
			if (string.IsNullOrEmpty(token))
			{
				apiResponse = "Token is missing.";
				return;
			}
			Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
			var response = await Http.GetAsync($"https://localhost:7154/api/insurance/{customerId}");
			response.EnsureSuccessStatusCode();
			var result = await response.Content.ReadFromJsonAsync<InsuranceResponse>();

			customer = result.Customer;
			policy = result.Policy;
		}
		catch (HttpRequestException ex)
		{
			Console.WriteLine($"Request error: {ex.Message}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Unexpected error: {ex.Message}");
		}


	}
}